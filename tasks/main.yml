---
- name: Ensure gpg is present
  apt:
    pkg: gnupg
    update_cache: True

- name: Ensure tor is installed
  apt:
    pkg: tor
    state: "{{ onion_tor_apt_state }}"

- name: Install extra tor packages
  apt:
    pkg: "{{ onion_apt_packages }}"
    state: present

- name: Ensure onion directory is present
  file:
    path: "/var/lib/tor/{{ item.key }}/"
    owner: debian-tor
    group: debian-tor
    mode: 0700
    state: directory
  with_dict: "{{ onion_services }}"
  when: item.value.onion_state|default('present') == 'present'
  notify: Restart tor

- name: Ensure onion configuration is latest
  template:
    src: torrc.j2
    dest: /etc/tor/torrc
    owner: root
    group: root
    mode: 0644
  notify: Restart tor

- name: Ensure hostname file are present
  template:
    src: hostname.j2
    dest: "/var/lib/tor/{{ item.key }}/hostname"
    owner: debian-tor
    group: debian-tor
    mode: 0600
    backup: yes
  with_dict: "{{ onion_services }}"
  when:
    - item.value.onion_hostname is defined
    - item.value.onion_hostname
    - item.value.onion_state|default('present') == 'present'
  notify: Restart tor

- name: Copy encoded public_key (only for onion v3)
  shell: "executable=/bin/bash set -o pipefail &&\
echo \"{{ item.value.onion_public_key_b64encoded }}\" | base64 -d >/var/lib/tor/{{ item.key }}/hs_ed25519_public_key"
  args:
    creates: "/var/lib/tor/{{ item.key }}/hs_ed25519_public_key"
  with_dict: "{{ onion_services }}"
  when:
    - item.value.onion_public_key_b64encoded is defined
    - item.value.onion_public_key_b64encoded
    - item.value.onion_state|default('present') == 'present'
  notify: Restart tor

- name: Ensure file permissions are correct
  file:
    path: "/var/lib/tor/{{ item.key }}/hs_ed25519_public_key"
    owner: debian-tor
    group: debian-tor
    mode: 0600
  with_dict: "{{ onion_services }}"
  when:
    - item.value.onion_public_key_b64encoded is defined
    - item.value.onion_public_key_b64encoded
    - item.value.onion_state|default('present') == 'present'

- name: Copy encoded secret_key (only for onion v3)
  shell: "executable=/bin/bash set -o pipefail &&\
echo \"{{ item.value.onion_secret_key_b64encoded }}\" | base64 -d >/var/lib/tor/{{ item.key }}/hs_ed25519_secret_key"
  args:
    creates: "/var/lib/tor/{{ item.key }}/hs_ed25519_secret_key"
  with_dict: "{{ onion_services }}"
  when:
    - item.value.onion_secret_key_b64encoded is defined
    - item.value.onion_secret_key_b64encoded
    - item.value.onion_state|default('present') == 'present'
  notify: Restart tor

- name: Ensure file permissions are correct
  file:
    path: "/var/lib/tor/{{ item.key }}/hs_ed25519_secret_key"
    owner: debian-tor
    group: debian-tor
    mode: 0600
  with_dict: "{{ onion_services }}"
  when:
    - item.value.onion_secret_key_b64encoded is defined
    - item.value.onion_secret_key_b64encoded
    - item.value.onion_state|default('present') == 'present'

- name: Ensure onion directory is absent
  file:
    path: "/var/lib/tor/{{ item.key }}/"
    mode: 0700
    state: absent
  with_dict: "{{ onion_services }}"
  when: item.value.onion_state|default('present') == "absent"

# The hostname file won't be created until the tor service
# is restarted, so bounce it before the `wait_for` task.
- name: flush handlers
  meta: flush_handlers

- name: Wait for onion
  wait_for:
    path: "/var/lib/tor/{{ item.key }}/hostname"
  with_dict: "{{ onion_services }}"
  when: item.value.onion_state|default('present') != "absent"

- name: Read onion url
  command: cat "/var/lib/tor/{{ item.key }}/hostname"
  register: onion_hostname_results
  changed_when: false
  with_dict: "{{ onion_services }}"
  when:
    - not item.value.onion_hostname|default(false)
    - item.value.onion_state|default('present') != "absent"

- name: Read onion v3 secret key
  command: base64 "/var/lib/tor/{{ item.key }}/hs_ed25519_secret_key"
  register: onion_v3_secret_key_results
  changed_when: false
  with_dict: "{{ onion_services }}"
  when:
    - not item.value.onion_secret_key_b64encoded|default(false)
    - item.value.onion_state|default('present') != "absent"

- name: Read onion v3 public key
  command: base64 "/var/lib/tor/{{ item.key }}/hs_ed25519_public_key"
  register: onion_v3_public_key_results
  changed_when: false
  with_dict: "{{ onion_services }}"
  when:
    - not item.value.onion_public_key_b64encoded|default(false)
    - item.value.onion_state|default('present') != "absent"

- name: Display onion url
  debug:
    msg: >-
      {{ lookup('template', role_path+'/templates/display_hostnames.j2') }}

- name: Display public key for v3 host
  debug:
    msg: >-
      {{ lookup('template', role_path+'/templates/display_v3_public_keys.j2') }}

- name: Display secret key for v3 host
  debug:
    msg: >-
      {{ lookup('template', role_path+'/templates/display_v3_secret_keys.j2') }}

# dirty hack to stop tor, when server is not the current onion server,
# restart handler above , would start tor with
# same url and private key on two hosts
- name: Stop tor, (two servers are up, only one should act as HS)
  service:
    name: tor
    enabled: no
    state: stopped
  notify: Stop tor
  when: not onion_active

- name: Import monit tasks
  import_tasks: monit.yml
  when: onion_monit_enabled

- name: Import goss tasks
  import_tasks: goss.yml
  tags:
    - goss
